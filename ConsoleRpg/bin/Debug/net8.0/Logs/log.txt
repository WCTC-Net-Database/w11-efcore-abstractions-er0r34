2024-12-05T18:55:49.7354479-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated]	An 'IServiceProvider' was created for internal use by Entity Framework.
2024-12-05T18:56:00.5957996-06:00	DBUG	[Microsoft.EntityFrameworkCore.Model]	[Microsoft.EntityFrameworkCore.Model.RedundantIndexRemoved]	The index {'AbilitiesId'} was not created on entity type 'AbilityPlayer (Dictionary<string, object>)' as the properties are already covered by the index {'AbilitiesId', 'PlayersId'}.
2024-12-05T18:56:00.8138836-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized]	Entity Framework Core 9.0.0 initialized 'GameContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.0' with options: EngineType=SqlServer using lazy loading proxies 
2024-12-05T18:56:00.8469196-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Player>()
    .OfType<Player>()
    .FirstOrDefault()'
2024-12-05T18:56:00.9195382-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T18:56:00.9985967-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Player>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.Experience (int) Required, 1], [Property: Player.Health (int) Required, 2], [Property: Player.Name (string) Required, 3] }
        SELECT TOP(1) p.Id, p.Experience, p.Health, p.Name
        FROM Players AS p) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.Experience (int) Required, 1], [Property: Player.Health (int) Required, 2], [Property: Player.Name (string) Required, 3] }
        SELECT TOP(1) p.Id, p.Experience, p.Health, p.Name
        FROM Players AS p, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Player entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Player instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Player);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Player.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Player)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]: 
                        {
                            return (Player)
                            {
                                PlayerProxy instance;
                                DbContext namelessParameter{2};
                                IEntityType namelessParameter{3};
                                ILazyLoader namelessParameter{4};
                                namelessParameter{2} = materializationContext1.Context;
                                namelessParameter{3} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{4} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (PlayerProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{2}, 
                                    entityType: namelessParameter{3}, 
                                    loader: namelessParameter{4}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<Experience>k__BackingField = dataReader.GetInt32(1);
                                instance.<Health>k__BackingField = dataReader.GetInt32(2);
                                instance.<Name>k__BackingField = dataReader.GetString(3);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{2} is IInjectableService) ? ((IInjectableService)namelessParameter{2}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Player)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T18:56:01.0107791-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating]	Creating DbConnection.
2024-12-05T18:56:01.0237920-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated]	Created DbConnection. (12ms).
2024-12-05T18:56:01.0245616-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:01.7579152-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:01.7599529-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T18:56:01.7634886-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (3ms).
2024-12-05T18:56:01.7641799-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (5ms).
2024-12-05T18:56:01.7668181-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T18:56:01.7827996-06:00	INFO	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted]	Executed DbCommand (16ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T18:56:01.8062077-06:00	DBUG	[Microsoft.EntityFrameworkCore.ChangeTracking]	[Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking]	Context 'GameContext' started tracking 'Player' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2024-12-05T18:56:01.8162899-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing]	Closing data reader to 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:01.8183761-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing]	A data reader for 'GameDatabase' on server '(localdb)\mssqllocaldb' is being disposed after spending 34ms reading results.
2024-12-05T18:56:01.8189792-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:01.8207843-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb' (1ms).
2024-12-05T18:56:01.8213387-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Monster>()
    .OfType<Goblin>()
    .FirstOrDefault()'
2024-12-05T18:56:01.8258838-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T18:56:01.8320718-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Goblin>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Monster.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Monster.AggressionLevel (int) Required, 1], [Property: Monster.Health (int) Required, 2], [Property: Monster.MonsterType (string) Required AfterSave:Throw MaxLength(8), 3], [Property: Monster.Name (string) Required, 4], [Property: Goblin.Sneakiness (int) Required, 5] }
        SELECT TOP(1) m.Id, m.AggressionLevel, m.Health, m.MonsterType, m.Name, m.Sneakiness
        FROM Monsters AS m) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Monster.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Monster.AggressionLevel (int) Required, 1], [Property: Monster.Health (int) Required, 2], [Property: Monster.MonsterType (string) Required AfterSave:Throw MaxLength(8), 3], [Property: Monster.Name (string) Required, 4], [Property: Goblin.Sneakiness (int) Required, 5] }
        SELECT TOP(1) m.Id, m.AggressionLevel, m.Health, m.MonsterType, m.Name, m.Sneakiness
        FROM Monsters AS m, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Goblin entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Goblin instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Goblin);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Monster.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Goblin)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = 
                {
                    string discriminator;
                    discriminator = dataReader.GetString(3);
                    return switch (discriminator)
                    {
                        case "Goblin": 
                            [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]
                        default: 
                            {
                                throw StructuralTypeShaperExpression.CreateUnableToDiscriminateException(
                                    type: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")], 
                                    discriminator: (object)discriminator);
                                return null;
                            }
                    }
                };
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]: 
                        {
                            return (Goblin)
                            {
                                GoblinProxy instance;
                                DbContext namelessParameter{3};
                                IEntityType namelessParameter{4};
                                ILazyLoader namelessParameter{5};
                                namelessParameter{3} = materializationContext1.Context;
                                namelessParameter{4} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{5} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (GoblinProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{3}, 
                                    entityType: namelessParameter{4}, 
                                    loader: namelessParameter{5}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<AggressionLevel>k__BackingField = dataReader.GetInt32(1);
                                instance.<Health>k__BackingField = dataReader.GetInt32(2);
                                instance.<MonsterType>k__BackingField = dataReader.GetString(3);
                                instance.<Name>k__BackingField = dataReader.GetString(4);
                                instance.<Sneakiness>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                (namelessParameter{5} is IInjectableService) ? ((IInjectableService)namelessParameter{5}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Goblin)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T18:56:01.8334043-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:01.8338027-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:01.8338365-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T18:56:01.8338538-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (0ms).
2024-12-05T18:56:01.8338623-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (0ms).
2024-12-05T18:56:01.8338843-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [m].[Id], [m].[AggressionLevel], [m].[Health], [m].[MonsterType], [m].[Name], [m].[Sneakiness]
FROM [Monsters] AS [m]
2024-12-05T18:56:01.8357946-06:00	INFO	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted]	Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [m].[Id], [m].[AggressionLevel], [m].[Health], [m].[MonsterType], [m].[Name], [m].[Sneakiness]
FROM [Monsters] AS [m]
2024-12-05T18:56:01.8377588-06:00	DBUG	[Microsoft.EntityFrameworkCore.ChangeTracking]	[Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking]	Context 'GameContext' started tracking 'Goblin' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2024-12-05T18:56:01.8421108-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing]	Closing data reader to 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:01.8421414-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing]	A data reader for 'GameDatabase' on server '(localdb)\mssqllocaldb' is being disposed after spending 6ms reading results.
2024-12-05T18:56:01.8421646-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:01.8421894-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb' (0ms).
2024-12-05T18:56:05.2306580-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.NavigationLazyLoading]	The navigation 'PlayerProxy.Abilities' is being lazy-loaded.
2024-12-05T18:56:05.2444223-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Player>()
    .Where(e => EF.Property<int>(e, "Id") == __p_0)
    .SelectMany(e => e.Abilities)
    .NotQuiteInclude(e => EF.Property<IEnumerable<Player>>(e, "Players")
        .Where(e => EF.Property<int>(e, "Id") == __p_0))
    .AsTracking()'
2024-12-05T18:56:05.2541813-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.NavigationBaseIncluded]	Including navigation: 'Ability.Players'.
2024-12-05T18:56:05.3082970-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Ability>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Ability.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Ability.AbilityType (string) Required AfterSave:Throw MaxLength(13), 1], [Property: Ability.Description (string) Required, 2], [Property: Ability.Name (string) Required, 3], [Property: ShoveAbility.Damage (int) Required, 4], [Property: ShoveAbility.Distance (int) Required, 5] }
            1 -> 6
            2 -> 7
            3 -> 8
            4 -> 0
            5 -> Dictionary<IProperty, int> { [Property: AbilityPlayer (Dictionary<string, object>).AbilitiesId (no field, int) Indexer Required PK FK AfterSave:Throw, 9], [Property: AbilityPlayer (Dictionary<string, object>).PlayersId (no field, int) Indexer Required PK FK Index AfterSave:Throw, 10] }
            6 -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 11], [Property: Player.Experience (int) Required, 12], [Property: Player.Health (int) Required, 13], [Property: Player.Name (string) Required, 14] }
            7 -> 9
            8 -> 10
            9 -> 11
        SELECT s.Id, s.AbilityType, s.Description, s.Name, s.Damage, s.Distance, p.Id, s.AbilitiesId, s.PlayersId, s0.AbilitiesId, s0.PlayersId, s0.Id, s0.Experience, s0.Health, s0.Name
        FROM Players AS p
        INNER JOIN 
        (
            SELECT a.Id, a.AbilityType, a.Description, a.Name, a.Damage, a.Distance, p0.AbilitiesId, p0.PlayersId
            FROM PlayerAbilities AS p0
            INNER JOIN Abilities AS a ON p0.AbilitiesId == a.Id
        ) AS s ON p.Id == s.PlayersId
        LEFT JOIN 
        (
            SELECT p1.AbilitiesId, p1.PlayersId, p2.Id, p2.Experience, p2.Health, p2.Name
            FROM PlayerAbilities AS p1
            INNER JOIN Players AS p2 ON p1.PlayersId == p2.Id
            WHERE p2.Id == @__p_0
        ) AS s0 ON s.Id == s0.AbilitiesId
        WHERE p.Id == @__p_0
        ORDER BY p.Id ASC, s.AbilitiesId ASC, s.PlayersId ASC, s.Id ASC, s0.AbilitiesId ASC, s0.PlayersId ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Ability.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Ability.AbilityType (string) Required AfterSave:Throw MaxLength(13), 1], [Property: Ability.Description (string) Required, 2], [Property: Ability.Name (string) Required, 3], [Property: ShoveAbility.Damage (int) Required, 4], [Property: ShoveAbility.Distance (int) Required, 5] }
            1 -> 6
            2 -> 7
            3 -> 8
            4 -> 0
            5 -> Dictionary<IProperty, int> { [Property: AbilityPlayer (Dictionary<string, object>).AbilitiesId (no field, int) Indexer Required PK FK AfterSave:Throw, 9], [Property: AbilityPlayer (Dictionary<string, object>).PlayersId (no field, int) Indexer Required PK FK Index AfterSave:Throw, 10] }
            6 -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 11], [Property: Player.Experience (int) Required, 12], [Property: Player.Health (int) Required, 13], [Property: Player.Name (string) Required, 14] }
            7 -> 9
            8 -> 10
            9 -> 11
        SELECT s.Id, s.AbilityType, s.Description, s.Name, s.Damage, s.Distance, p.Id, s.AbilitiesId, s.PlayersId, s0.AbilitiesId, s0.PlayersId, s0.Id, s0.Experience, s0.Health, s0.Name
        FROM Players AS p
        INNER JOIN 
        (
            SELECT a.Id, a.AbilityType, a.Description, a.Name, a.Damage, a.Distance, p0.AbilitiesId, p0.PlayersId
            FROM PlayerAbilities AS p0
            INNER JOIN Abilities AS a ON p0.AbilitiesId == a.Id
        ) AS s ON p.Id == s.PlayersId
        LEFT JOIN 
        (
            SELECT p1.AbilitiesId, p1.PlayersId, p2.Id, p2.Experience, p2.Health, p2.Name
            FROM PlayerAbilities AS p1
            INNER JOIN Players AS p2 ON p1.PlayersId == p2.Id
            WHERE p2.Id == @__p_0
        ) AS s0 ON s.Id == s0.AbilitiesId
        WHERE p.Id == @__p_0
        ORDER BY p.Id ASC, s.AbilitiesId ASC, s.PlayersId ASC, s.Id ASC, s0.AbilitiesId ASC, s0.PlayersId ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Ability entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Ability instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Ability);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Ability.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.Ability").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Ability)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = 
                    {
                        string discriminator;
                        discriminator = dataReader.GetString(1);
                        return switch (discriminator)
                        {
                            case "ShoveAbility": 
                                [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]
                            default: 
                                {
                                    throw StructuralTypeShaperExpression.CreateUnableToDiscriminateException(
                                        type: [LIFTABLE Constant: EntityType: Ability Abstract | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.Ability")], 
                                        discriminator: (object)discriminator);
                                    return null;
                                }
                        }
                    };
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]: 
                            {
                                return (Ability)
                                {
                                    ShoveAbilityProxy instance;
                                    DbContext namelessParameter{3};
                                    IEntityType namelessParameter{4};
                                    ILazyLoader namelessParameter{5};
                                    namelessParameter{3} = materializationContext1.Context;
                                    namelessParameter{4} = (IEntityType)ParameterBindingInfo.StructuralType;
                                    namelessParameter{5} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                    instance = (ShoveAbilityProxy)ProxyFactory.CreateLazyLoadingProxy(
                                        context: namelessParameter{3}, 
                                        entityType: namelessParameter{4}, 
                                        loader: namelessParameter{5}, 
                                        constructorArguments: new object[]{ });
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<AbilityType>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Name>k__BackingField = dataReader.GetString(3);
                                    instance.<Damage>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                    instance.<Distance>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]) : default(void);
                                    (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]) : default(void);
                                    (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]) : default(void);
                                    (namelessParameter{5} is IInjectableService) ? ((IInjectableService)namelessParameter{5}).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]) : default(void);
                                    return instance;
                                };
                            }
                        default: 
                            default(Ability)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Ability, Ability>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Ability)(resultContext.Values[0]), 
                parentIdentifier: (queryContext, dataReader) => new object[]
                { 
                    (object)(int?)dataReader.GetInt32(6), 
                    (object)(int?)dataReader.GetInt32(7), 
                    (object)(int?)dataReader.GetInt32(8), 
                    (object)(int?)dataReader.GetInt32(0) 
                }, 
                outerIdentifier: (queryContext, dataReader) => new object[]
                { 
                    (object)(int?)dataReader.GetInt32(6), 
                    (object)(int?)dataReader.GetInt32(7), 
                    (object)(int?)dataReader.GetInt32(8), 
                    (object)(int?)dataReader.GetInt32(0) 
                }, 
                navigation: [LIFTABLE Constant: SkipNavigation: Ability.Players (IEnumerable<Player>) CollectionPlayer Inverse: Abilities PropertyAccessMode.Field | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.Ability").FindSkipNavigation("Players")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Ability, IEnumerable<Player>, Player> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.Ability").FindSkipNavigation("Players").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: False);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Ability, Player>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: (queryContext, dataReader) => new object[]
            { 
                (object)(int?)dataReader.GetInt32(6), 
                (object)(int?)dataReader.GetInt32(7), 
                (object)(int?)dataReader.GetInt32(8), 
                (object)(int?)dataReader.GetInt32(0) 
            }, 
            outerIdentifier: (queryContext, dataReader) => new object[]
            { 
                (object)(int?)dataReader.GetInt32(6), 
                (object)(int?)dataReader.GetInt32(7), 
                (object)(int?)dataReader.GetInt32(8), 
                (object)(int?)dataReader.GetInt32(0) 
            }, 
            selfIdentifier: (queryContext, dataReader) => new object[]
            { 
                (object)dataReader.IsDBNull(9) ? default(int?) : (int?)dataReader.GetInt32(9), 
                (object)dataReader.IsDBNull(10) ? default(int?) : (int?)dataReader.GetInt32(10), 
                (object)dataReader.IsDBNull(11) ? default(int?) : (int?)dataReader.GetInt32(11) 
            }, 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
            { 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) 
            }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
            { 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) 
            }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
            { 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) 
            }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Dictionary<string, object> entity;
                Player entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Dictionary<string, object> instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Dictionary<string, object>);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: AbilityPlayer (Dictionary<string, object>).AbilitiesId, AbilityPlayer (Dictionary<string, object>).PlayersId PK | Resolver: c => c.Dependencies.Model.FindEntityType("AbilityPlayer").FindPrimaryKey()], 
                        keyValues: new object[]
                        { 
                            dataReader.IsDBNull(9) ? default(object) : (object)dataReader.GetInt32(9), 
                            dataReader.IsDBNull(10) ? default(object) : (object)dataReader.GetInt32(10) 
                        }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Dictionary<string, object>)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("AbilityPlayer")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("AbilityPlayer")]: 
                                {
                                    return (Dictionary<string, object>)
                                    {
                                        Dictionary`2Proxy instance;
                                        DbContext namelessParameter{14};
                                        IEntityType namelessParameter{15};
                                        ILazyLoader namelessParameter{16};
                                        namelessParameter{14} = materializationContext2.Context;
                                        namelessParameter{15} = (IEntityType)ParameterBindingInfo.StructuralType;
                                        namelessParameter{16} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext2.Context);
                                        instance = (Dictionary`2Proxy)ProxyFactory.CreateLazyLoadingProxy(
                                            context: namelessParameter{14}, 
                                            entityType: namelessParameter{15}, 
                                            loader: namelessParameter{16}, 
                                            constructorArguments: new object[]{ });
                                        instance["AbilitiesId"] = dataReader.IsDBNull(9) ? default(object) : (object)dataReader.GetInt32(9);
                                        instance["PlayersId"] = dataReader.IsDBNull(10) ? default(object) : (object)dataReader.GetInt32(10);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("AbilityPlayer")]) : default(void);
                                        (namelessParameter{14} is IInjectableService) ? ((IInjectableService)namelessParameter{14}).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{18} => namelessParameter{18}.Dependencies.Model.FindEntityType("AbilityPlayer")]) : default(void);
                                        (namelessParameter{15} is IInjectableService) ? ((IInjectableService)namelessParameter{15}).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{19} => namelessParameter{19}.Dependencies.Model.FindEntityType("AbilityPlayer")]) : default(void);
                                        (namelessParameter{16} is IInjectableService) ? ((IInjectableService)namelessParameter{16}).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("AbilityPlayer")]) : default(void);
                                        return instance;
                                    };
                                }
                            default: 
                                default(Dictionary<string, object>)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                entity = 
                {
                    MaterializationContext materializationContext3;
                    IEntityType entityType3;
                    Player instance3;
                    InternalEntityEntry entry3;
                    bool hasNullKey3;
                    materializationContext3 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance3 = default(Player);
                    entry3 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Player.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(11) ? default(object) : (object)dataReader.GetInt32(11) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey3);
                    !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
                    {
                        entityType3 = entry3.EntityType;
                        return instance3 = (Player)entry3.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot3;
                        shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType3 = [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{21} => namelessParameter{21}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")];
                        instance3 = switch (entityType3)
                        {
                            case [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{22} => namelessParameter{22}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]: 
                                {
                                    return (Player)
                                    {
                                        PlayerProxy instance;
                                        DbContext namelessParameter{23};
                                        IEntityType namelessParameter{24};
                                        ILazyLoader namelessParameter{25};
                                        namelessParameter{23} = materializationContext3.Context;
                                        namelessParameter{24} = (IEntityType)ParameterBindingInfo.StructuralType;
                                        namelessParameter{25} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext3.Context);
                                        instance = (PlayerProxy)ProxyFactory.CreateLazyLoadingProxy(
                                            context: namelessParameter{23}, 
                                            entityType: namelessParameter{24}, 
                                            loader: namelessParameter{25}, 
                                            constructorArguments: new object[]{ });
                                        instance.<Id>k__BackingField = dataReader.IsDBNull(11) ? default(int) : dataReader.GetInt32(11);
                                        instance.<Experience>k__BackingField = dataReader.IsDBNull(12) ? default(int) : dataReader.GetInt32(12);
                                        instance.<Health>k__BackingField = dataReader.IsDBNull(13) ? default(int) : dataReader.GetInt32(13);
                                        instance.<Name>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext3.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{26} => namelessParameter{26}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                        (namelessParameter{23} is IInjectableService) ? ((IInjectableService)namelessParameter{23}).Injected(
                                            context: materializationContext3.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{27} => namelessParameter{27}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                        (namelessParameter{24} is IInjectableService) ? ((IInjectableService)namelessParameter{24}).Injected(
                                            context: materializationContext3.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{28} => namelessParameter{28}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                        (namelessParameter{25} is IInjectableService) ? ((IInjectableService)namelessParameter{25}).Injected(
                                            context: materializationContext3.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{29} => namelessParameter{29}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                        return instance;
                                    };
                                }
                            default: 
                                default(Player)
                        }
                        ;
                        entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType3, 
                            entity: instance3, 
                            snapshot: shadowSnapshot3);
                        return instance3;
                    } : default(void);
                    return instance3;
                };
                return NavigationExpandingExpressionVisitor.FetchJoinEntity<Dictionary<string, object>, Player>(
                    joinEntity: entity, 
                    targetEntity: entity);
            }, 
            inverseNavigation: [LIFTABLE Constant: SkipNavigation: Player.Abilities (IEnumerable<Ability>) CollectionAbility Inverse: Players PropertyAccessMode.Field | Resolver: namelessParameter{30} => namelessParameter{30}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindSkipNavigation("Abilities")], 
            fixup: (namelessParameter{31}, namelessParameter{32}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Ability, IEnumerable<Player>, Player> | Resolver: namelessParameter{33} => namelessParameter{33}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.Ability").FindSkipNavigation("Players").GetCollectionAccessor()].Add(
                    entity: namelessParameter{31}, 
                    value: namelessParameter{32}, 
                    forMaterialization: True);
                return [LIFTABLE Constant: ClrICollectionAccessor<Player, IEnumerable<Ability>, Ability> | Resolver: namelessParameter{34} => namelessParameter{34}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindSkipNavigation("Abilities").GetCollectionAccessor()].Add(
                    entity: namelessParameter{32}, 
                    value: namelessParameter{31}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Ability)(resultContext.Values[0]) : default(Ability);
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2024-12-05T18:56:05.3148110-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:05.3149424-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:05.3149581-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T18:56:05.3149738-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (0ms).
2024-12-05T18:56:05.3159648-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (1ms).
2024-12-05T18:56:05.3170113-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [s].[Id], [s].[AbilityType], [s].[Description], [s].[Name], [s].[Damage], [s].[Distance], [p].[Id], [s].[AbilitiesId], [s].[PlayersId], [s0].[AbilitiesId], [s0].[PlayersId], [s0].[Id], [s0].[Experience], [s0].[Health], [s0].[Name]
FROM [Players] AS [p]
INNER JOIN (
    SELECT [a].[Id], [a].[AbilityType], [a].[Description], [a].[Name], [a].[Damage], [a].[Distance], [p0].[AbilitiesId], [p0].[PlayersId]
    FROM [PlayerAbilities] AS [p0]
    INNER JOIN [Abilities] AS [a] ON [p0].[AbilitiesId] = [a].[Id]
) AS [s] ON [p].[Id] = [s].[PlayersId]
LEFT JOIN (
    SELECT [p1].[AbilitiesId], [p1].[PlayersId], [p2].[Id], [p2].[Experience], [p2].[Health], [p2].[Name]
    FROM [PlayerAbilities] AS [p1]
    INNER JOIN [Players] AS [p2] ON [p1].[PlayersId] = [p2].[Id]
    WHERE [p2].[Id] = @__p_0
) AS [s0] ON [s].[Id] = [s0].[AbilitiesId]
WHERE [p].[Id] = @__p_0
ORDER BY [p].[Id], [s].[AbilitiesId], [s].[PlayersId], [s].[Id], [s0].[AbilitiesId], [s0].[PlayersId]
2024-12-05T18:56:05.3329658-06:00	INFO	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted]	Executed DbCommand (17ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [s].[Id], [s].[AbilityType], [s].[Description], [s].[Name], [s].[Damage], [s].[Distance], [p].[Id], [s].[AbilitiesId], [s].[PlayersId], [s0].[AbilitiesId], [s0].[PlayersId], [s0].[Id], [s0].[Experience], [s0].[Health], [s0].[Name]
FROM [Players] AS [p]
INNER JOIN (
    SELECT [a].[Id], [a].[AbilityType], [a].[Description], [a].[Name], [a].[Damage], [a].[Distance], [p0].[AbilitiesId], [p0].[PlayersId]
    FROM [PlayerAbilities] AS [p0]
    INNER JOIN [Abilities] AS [a] ON [p0].[AbilitiesId] = [a].[Id]
) AS [s] ON [p].[Id] = [s].[PlayersId]
LEFT JOIN (
    SELECT [p1].[AbilitiesId], [p1].[PlayersId], [p2].[Id], [p2].[Experience], [p2].[Health], [p2].[Name]
    FROM [PlayerAbilities] AS [p1]
    INNER JOIN [Players] AS [p2] ON [p1].[PlayersId] = [p2].[Id]
    WHERE [p2].[Id] = @__p_0
) AS [s0] ON [s].[Id] = [s0].[AbilitiesId]
WHERE [p].[Id] = @__p_0
ORDER BY [p].[Id], [s].[AbilitiesId], [s].[PlayersId], [s].[Id], [s0].[AbilitiesId], [s0].[PlayersId]
2024-12-05T18:56:05.3363641-06:00	DBUG	[Microsoft.EntityFrameworkCore.ChangeTracking]	[Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking]	Context 'GameContext' started tracking 'ShoveAbility' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2024-12-05T18:56:05.3487030-06:00	DBUG	[Microsoft.EntityFrameworkCore.ChangeTracking]	[Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking]	Context 'GameContext' started tracking 'AbilityPlayer' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2024-12-05T18:56:05.3496457-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing]	Closing data reader to 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:05.3499014-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing]	A data reader for 'GameDatabase' on server '(localdb)\mssqllocaldb' is being disposed after spending 16ms reading results.
2024-12-05T18:56:05.3499400-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T18:56:05.3499756-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb' (0ms).
2024-12-05T19:09:47.0922778-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated]	An 'IServiceProvider' was created for internal use by Entity Framework.
2024-12-05T19:09:49.1393279-06:00	DBUG	[Microsoft.EntityFrameworkCore.Model]	[Microsoft.EntityFrameworkCore.Model.RedundantIndexRemoved]	The index {'AbilitiesId'} was not created on entity type 'AbilityPlayer (Dictionary<string, object>)' as the properties are already covered by the index {'AbilitiesId', 'PlayersId'}.
2024-12-05T19:09:49.2593289-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized]	Entity Framework Core 9.0.0 initialized 'GameContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.0' with options: EngineType=SqlServer using lazy loading proxies 
2024-12-05T19:09:49.2997245-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Player>()
    .OfType<Player>()
    .FirstOrDefault()'
2024-12-05T19:09:49.3788768-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T19:09:49.4766433-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Player>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.Experience (int) Required, 1], [Property: Player.Health (int) Required, 2], [Property: Player.Name (string) Required, 3] }
        SELECT TOP(1) p.Id, p.Experience, p.Health, p.Name
        FROM Players AS p) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.Experience (int) Required, 1], [Property: Player.Health (int) Required, 2], [Property: Player.Name (string) Required, 3] }
        SELECT TOP(1) p.Id, p.Experience, p.Health, p.Name
        FROM Players AS p, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Player entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Player instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Player);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Player.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Player)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]: 
                        {
                            return (Player)
                            {
                                PlayerProxy instance;
                                DbContext namelessParameter{2};
                                IEntityType namelessParameter{3};
                                ILazyLoader namelessParameter{4};
                                namelessParameter{2} = materializationContext1.Context;
                                namelessParameter{3} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{4} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (PlayerProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{2}, 
                                    entityType: namelessParameter{3}, 
                                    loader: namelessParameter{4}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<Experience>k__BackingField = dataReader.GetInt32(1);
                                instance.<Health>k__BackingField = dataReader.GetInt32(2);
                                instance.<Name>k__BackingField = dataReader.GetString(3);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{2} is IInjectableService) ? ((IInjectableService)namelessParameter{2}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Player)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T19:09:49.4902800-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating]	Creating DbConnection.
2024-12-05T19:09:49.5043856-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated]	Created DbConnection. (12ms).
2024-12-05T19:09:49.5055114-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T19:09:50.4935993-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T19:09:50.4960013-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T19:09:50.4995362-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (2ms).
2024-12-05T19:09:50.5002171-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (5ms).
2024-12-05T19:09:50.5030867-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T19:09:50.5172848-06:00	INFO	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted]	Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T19:09:50.5390189-06:00	DBUG	[Microsoft.EntityFrameworkCore.ChangeTracking]	[Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking]	Context 'GameContext' started tracking 'Player' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2024-12-05T19:09:50.5477523-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing]	Closing data reader to 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T19:09:50.5498842-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing]	A data reader for 'GameDatabase' on server '(localdb)\mssqllocaldb' is being disposed after spending 31ms reading results.
2024-12-05T19:09:50.5505196-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T19:09:50.5523910-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb' (1ms).
2024-12-05T19:09:50.5530533-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Monster>()
    .OfType<Goblin>()
    .FirstOrDefault()'
2024-12-05T19:09:50.5575295-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T19:09:50.5638824-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Goblin>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Monster.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Monster.AggressionLevel (int) Required, 1], [Property: Monster.Health (int) Required, 2], [Property: Monster.MonsterType (string) Required AfterSave:Throw MaxLength(8), 3], [Property: Monster.Name (string) Required, 4], [Property: Goblin.Sneakiness (int) Required, 5] }
        SELECT TOP(1) m.Id, m.AggressionLevel, m.Health, m.MonsterType, m.Name, m.Sneakiness
        FROM Monsters AS m) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Monster.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Monster.AggressionLevel (int) Required, 1], [Property: Monster.Health (int) Required, 2], [Property: Monster.MonsterType (string) Required AfterSave:Throw MaxLength(8), 3], [Property: Monster.Name (string) Required, 4], [Property: Goblin.Sneakiness (int) Required, 5] }
        SELECT TOP(1) m.Id, m.AggressionLevel, m.Health, m.MonsterType, m.Name, m.Sneakiness
        FROM Monsters AS m, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Goblin entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Goblin instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Goblin);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Monster.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Goblin)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = 
                {
                    string discriminator;
                    discriminator = dataReader.GetString(3);
                    return switch (discriminator)
                    {
                        case "Goblin": 
                            [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]
                        default: 
                            {
                                throw StructuralTypeShaperExpression.CreateUnableToDiscriminateException(
                                    type: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")], 
                                    discriminator: (object)discriminator);
                                return null;
                            }
                    }
                };
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]: 
                        {
                            return (Goblin)
                            {
                                GoblinProxy instance;
                                DbContext namelessParameter{3};
                                IEntityType namelessParameter{4};
                                ILazyLoader namelessParameter{5};
                                namelessParameter{3} = materializationContext1.Context;
                                namelessParameter{4} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{5} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (GoblinProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{3}, 
                                    entityType: namelessParameter{4}, 
                                    loader: namelessParameter{5}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<AggressionLevel>k__BackingField = dataReader.GetInt32(1);
                                instance.<Health>k__BackingField = dataReader.GetInt32(2);
                                instance.<MonsterType>k__BackingField = dataReader.GetString(3);
                                instance.<Name>k__BackingField = dataReader.GetString(4);
                                instance.<Sneakiness>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                (namelessParameter{5} is IInjectableService) ? ((IInjectableService)namelessParameter{5}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Goblin)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T19:09:50.5653012-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T19:09:50.5657226-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T19:09:50.5657596-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T19:09:50.5657780-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (0ms).
2024-12-05T19:09:50.5657917-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (0ms).
2024-12-05T19:09:50.5658167-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [m].[Id], [m].[AggressionLevel], [m].[Health], [m].[MonsterType], [m].[Name], [m].[Sneakiness]
FROM [Monsters] AS [m]
2024-12-05T19:09:50.5678505-06:00	INFO	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted]	Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [m].[Id], [m].[AggressionLevel], [m].[Health], [m].[MonsterType], [m].[Name], [m].[Sneakiness]
FROM [Monsters] AS [m]
2024-12-05T19:09:50.5698189-06:00	DBUG	[Microsoft.EntityFrameworkCore.ChangeTracking]	[Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking]	Context 'GameContext' started tracking 'Goblin' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2024-12-05T19:09:50.5739874-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing]	Closing data reader to 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T19:09:50.5740164-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing]	A data reader for 'GameDatabase' on server '(localdb)\mssqllocaldb' is being disposed after spending 6ms reading results.
2024-12-05T19:09:50.5740355-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb'.
2024-12-05T19:09:50.5740623-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'GameDatabase' on server '(localdb)\mssqllocaldb' (0ms).
2024-12-05T19:27:00.4694641-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated]	An 'IServiceProvider' was created for internal use by Entity Framework.
2024-12-05T19:27:02.0734640-06:00	DBUG	[Microsoft.EntityFrameworkCore.Model]	[Microsoft.EntityFrameworkCore.Model.RedundantIndexRemoved]	The index {'AbilitiesId'} was not created on entity type 'AbilityPlayer (Dictionary<string, object>)' as the properties are already covered by the index {'AbilitiesId', 'PlayersId'}.
2024-12-05T19:27:02.2508061-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized]	Entity Framework Core 9.0.0 initialized 'GameContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.0' with options: EngineType=SqlServer using lazy loading proxies 
2024-12-05T19:27:02.2774557-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Player>()
    .OfType<Player>()
    .FirstOrDefault()'
2024-12-05T19:27:02.3417582-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T19:27:02.4112533-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Player>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.Experience (int) Required, 1], [Property: Player.Health (int) Required, 2], [Property: Player.Name (string) Required, 3] }
        SELECT TOP(1) p.Id, p.Experience, p.Health, p.Name
        FROM Players AS p) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.Experience (int) Required, 1], [Property: Player.Health (int) Required, 2], [Property: Player.Name (string) Required, 3] }
        SELECT TOP(1) p.Id, p.Experience, p.Health, p.Name
        FROM Players AS p, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Player entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Player instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Player);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Player.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Player)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]: 
                        {
                            return (Player)
                            {
                                PlayerProxy instance;
                                DbContext namelessParameter{2};
                                IEntityType namelessParameter{3};
                                ILazyLoader namelessParameter{4};
                                namelessParameter{2} = materializationContext1.Context;
                                namelessParameter{3} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{4} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (PlayerProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{2}, 
                                    entityType: namelessParameter{3}, 
                                    loader: namelessParameter{4}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<Experience>k__BackingField = dataReader.GetInt32(1);
                                instance.<Health>k__BackingField = dataReader.GetInt32(2);
                                instance.<Name>k__BackingField = dataReader.GetString(3);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{2} is IInjectableService) ? ((IInjectableService)namelessParameter{2}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Player)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T19:27:02.4217863-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating]	Creating DbConnection.
2024-12-05T19:27:02.4300898-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated]	Created DbConnection. (6ms).
2024-12-05T19:27:02.4308714-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T19:27:02.5977413-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T19:27:02.5999114-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T19:27:02.6020011-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (2ms).
2024-12-05T19:27:02.6025603-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (3ms).
2024-12-05T19:27:02.6046728-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T19:27:02.6234232-06:00	FAIL	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandError]	Failed executing DbCommand (18ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T19:27:02.6240595-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T19:27:02.6268709-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'W11_Assignment' on server 'bitsql.wctc.edu' (1ms).
2024-12-05T19:27:02.6345990-06:00	FAIL	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryIterationFailed]	An exception occurred while iterating over the results of a query for context type 'ConsoleRpgEntities.Data.GameContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid object name 'Players'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at Microsoft.Data.SqlClient.SqlDataReader.get_MetaData()
   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
ClientConnectionId:28566caa-b94c-404a-9bf8-5eeb0f2c51ee
Error Number:208,State:1,Class:16Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid object name 'Players'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at Microsoft.Data.SqlClient.SqlDataReader.get_MetaData()
   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
ClientConnectionId:28566caa-b94c-404a-9bf8-5eeb0f2c51ee
Error Number:208,State:1,Class:16

2024-12-05T19:27:23.1015107-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated]	An 'IServiceProvider' was created for internal use by Entity Framework.
2024-12-05T19:27:25.1147891-06:00	DBUG	[Microsoft.EntityFrameworkCore.Model]	[Microsoft.EntityFrameworkCore.Model.RedundantIndexRemoved]	The index {'AbilitiesId'} was not created on entity type 'AbilityPlayer (Dictionary<string, object>)' as the properties are already covered by the index {'AbilitiesId', 'PlayersId'}.
2024-12-05T19:27:25.2017443-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized]	Entity Framework Core 9.0.0 initialized 'GameContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.0' with options: EngineType=SqlServer using lazy loading proxies 
2024-12-05T19:27:25.2236886-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Player>()
    .OfType<Player>()
    .FirstOrDefault()'
2024-12-05T19:27:25.2858405-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T19:27:25.3542672-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Player>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.Experience (int) Required, 1], [Property: Player.Health (int) Required, 2], [Property: Player.Name (string) Required, 3] }
        SELECT TOP(1) p.Id, p.Experience, p.Health, p.Name
        FROM Players AS p) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.Experience (int) Required, 1], [Property: Player.Health (int) Required, 2], [Property: Player.Name (string) Required, 3] }
        SELECT TOP(1) p.Id, p.Experience, p.Health, p.Name
        FROM Players AS p, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Player entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Player instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Player);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Player.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Player)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]: 
                        {
                            return (Player)
                            {
                                PlayerProxy instance;
                                DbContext namelessParameter{2};
                                IEntityType namelessParameter{3};
                                ILazyLoader namelessParameter{4};
                                namelessParameter{2} = materializationContext1.Context;
                                namelessParameter{3} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{4} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (PlayerProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{2}, 
                                    entityType: namelessParameter{3}, 
                                    loader: namelessParameter{4}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<Experience>k__BackingField = dataReader.GetInt32(1);
                                instance.<Health>k__BackingField = dataReader.GetInt32(2);
                                instance.<Name>k__BackingField = dataReader.GetString(3);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{2} is IInjectableService) ? ((IInjectableService)namelessParameter{2}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Player)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T19:27:25.3646432-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating]	Creating DbConnection.
2024-12-05T19:27:25.3727646-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated]	Created DbConnection. (6ms).
2024-12-05T19:27:25.3735124-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T19:27:25.4840766-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T19:27:25.4859791-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T19:27:25.4881325-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (2ms).
2024-12-05T19:27:25.4887421-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (3ms).
2024-12-05T19:27:25.4909934-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T19:27:25.5080142-06:00	FAIL	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandError]	Failed executing DbCommand (16ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T19:27:25.5085957-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T19:27:25.5114804-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'W11_Assignment' on server 'bitsql.wctc.edu' (1ms).
2024-12-05T19:27:25.5177078-06:00	FAIL	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryIterationFailed]	An exception occurred while iterating over the results of a query for context type 'ConsoleRpgEntities.Data.GameContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid object name 'Players'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at Microsoft.Data.SqlClient.SqlDataReader.get_MetaData()
   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
ClientConnectionId:98c9bd3a-25c1-46ea-bb73-7e8b8c13d208
Error Number:208,State:1,Class:16Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid object name 'Players'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at Microsoft.Data.SqlClient.SqlDataReader.get_MetaData()
   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
ClientConnectionId:98c9bd3a-25c1-46ea-bb73-7e8b8c13d208
Error Number:208,State:1,Class:16

2024-12-05T20:12:37.2709955-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated]	An 'IServiceProvider' was created for internal use by Entity Framework.
2024-12-05T20:12:39.1209005-06:00	DBUG	[Microsoft.EntityFrameworkCore.Model]	[Microsoft.EntityFrameworkCore.Model.RedundantIndexRemoved]	The index {'AbilitiesId'} was not created on entity type 'AbilityPlayer (Dictionary<string, object>)' as the properties are already covered by the index {'AbilitiesId', 'PlayersId'}.
2024-12-05T20:12:39.3097867-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized]	Entity Framework Core 9.0.0 initialized 'GameContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.0' with options: EngineType=SqlServer using lazy loading proxies 
2024-12-05T20:12:39.3379351-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Player>()
    .OfType<Player>()
    .FirstOrDefault()'
2024-12-05T20:12:39.4055205-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T20:12:39.4837409-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Player>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.EquipmentId (int?) FK Index, 1], [Property: Player.Experience (int) Required, 2], [Property: Player.Health (int) Required, 3], [Property: Player.Name (string) Required, 4] }
        SELECT TOP(1) p.Id, p.EquipmentId, p.Experience, p.Health, p.Name
        FROM Players AS p) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.EquipmentId (int?) FK Index, 1], [Property: Player.Experience (int) Required, 2], [Property: Player.Health (int) Required, 3], [Property: Player.Name (string) Required, 4] }
        SELECT TOP(1) p.Id, p.EquipmentId, p.Experience, p.Health, p.Name
        FROM Players AS p, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Player entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Player instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Player);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Player.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Player)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]: 
                        {
                            return (Player)
                            {
                                PlayerProxy instance;
                                DbContext namelessParameter{2};
                                IEntityType namelessParameter{3};
                                ILazyLoader namelessParameter{4};
                                namelessParameter{2} = materializationContext1.Context;
                                namelessParameter{3} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{4} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (PlayerProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{2}, 
                                    entityType: namelessParameter{3}, 
                                    loader: namelessParameter{4}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<EquipmentId>k__BackingField = dataReader.IsDBNull(1) ? default(int?) : (int?)dataReader.GetInt32(1);
                                instance.<Experience>k__BackingField = dataReader.GetInt32(2);
                                instance.<Health>k__BackingField = dataReader.GetInt32(3);
                                instance.<Name>k__BackingField = dataReader.GetString(4);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{2} is IInjectableService) ? ((IInjectableService)namelessParameter{2}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Player)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T20:12:39.4971093-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating]	Creating DbConnection.
2024-12-05T20:12:39.5082283-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated]	Created DbConnection. (10ms).
2024-12-05T20:12:39.5089707-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T20:12:39.6374266-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T20:12:39.6392868-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T20:12:39.6416680-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (2ms).
2024-12-05T20:12:39.6422331-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (4ms).
2024-12-05T20:12:39.6452942-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[EquipmentId], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T20:12:39.6628495-06:00	FAIL	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandError]	Failed executing DbCommand (18ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[EquipmentId], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T20:12:39.6634652-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T20:12:39.6662925-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'W11_Assignment' on server 'bitsql.wctc.edu' (1ms).
2024-12-05T20:12:39.6741276-06:00	FAIL	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryIterationFailed]	An exception occurred while iterating over the results of a query for context type 'ConsoleRpgEntities.Data.GameContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid column name 'EquipmentId'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at Microsoft.Data.SqlClient.SqlDataReader.get_MetaData()
   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
ClientConnectionId:8cf3db96-fef8-4d2f-abc2-9f9e3eb7ae70
Error Number:207,State:1,Class:16Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid column name 'EquipmentId'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at Microsoft.Data.SqlClient.SqlDataReader.get_MetaData()
   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
ClientConnectionId:8cf3db96-fef8-4d2f-abc2-9f9e3eb7ae70
Error Number:207,State:1,Class:16

2024-12-05T20:28:49.1521207-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated]	An 'IServiceProvider' was created for internal use by Entity Framework.
2024-12-05T20:28:50.7657339-06:00	DBUG	[Microsoft.EntityFrameworkCore.Model]	[Microsoft.EntityFrameworkCore.Model.RedundantIndexRemoved]	The index {'AbilitiesId'} was not created on entity type 'AbilityPlayer (Dictionary<string, object>)' as the properties are already covered by the index {'AbilitiesId', 'PlayersId'}.
2024-12-05T20:28:50.8663329-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized]	Entity Framework Core 9.0.0 initialized 'GameContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.0' with options: EngineType=SqlServer using lazy loading proxies 
2024-12-05T20:28:50.8910182-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Player>()
    .OfType<Player>()
    .FirstOrDefault()'
2024-12-05T20:28:50.9649424-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T20:28:51.0452448-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Player>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.EquipmentId (int?) FK Index, 1], [Property: Player.Experience (int) Required, 2], [Property: Player.Health (int) Required, 3], [Property: Player.Name (string) Required, 4] }
        SELECT TOP(1) p.Id, p.EquipmentId, p.Experience, p.Health, p.Name
        FROM Players AS p) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.EquipmentId (int?) FK Index, 1], [Property: Player.Experience (int) Required, 2], [Property: Player.Health (int) Required, 3], [Property: Player.Name (string) Required, 4] }
        SELECT TOP(1) p.Id, p.EquipmentId, p.Experience, p.Health, p.Name
        FROM Players AS p, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Player entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Player instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Player);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Player.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Player)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]: 
                        {
                            return (Player)
                            {
                                PlayerProxy instance;
                                DbContext namelessParameter{2};
                                IEntityType namelessParameter{3};
                                ILazyLoader namelessParameter{4};
                                namelessParameter{2} = materializationContext1.Context;
                                namelessParameter{3} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{4} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (PlayerProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{2}, 
                                    entityType: namelessParameter{3}, 
                                    loader: namelessParameter{4}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<EquipmentId>k__BackingField = dataReader.IsDBNull(1) ? default(int?) : (int?)dataReader.GetInt32(1);
                                instance.<Experience>k__BackingField = dataReader.GetInt32(2);
                                instance.<Health>k__BackingField = dataReader.GetInt32(3);
                                instance.<Name>k__BackingField = dataReader.GetString(4);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{2} is IInjectableService) ? ((IInjectableService)namelessParameter{2}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Player)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T20:28:51.0579498-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating]	Creating DbConnection.
2024-12-05T20:28:51.0745760-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated]	Created DbConnection. (14ms).
2024-12-05T20:28:51.0765576-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T20:28:51.2063265-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T20:28:51.2087762-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T20:28:51.2114046-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (2ms).
2024-12-05T20:28:51.2121373-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (4ms).
2024-12-05T20:28:51.2147440-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[EquipmentId], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T20:28:51.2322585-06:00	FAIL	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandError]	Failed executing DbCommand (17ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[EquipmentId], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T20:28:51.2330385-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T20:28:51.2363103-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'W11_Assignment' on server 'bitsql.wctc.edu' (2ms).
2024-12-05T20:28:51.2434826-06:00	FAIL	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryIterationFailed]	An exception occurred while iterating over the results of a query for context type 'ConsoleRpgEntities.Data.GameContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid column name 'EquipmentId'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at Microsoft.Data.SqlClient.SqlDataReader.get_MetaData()
   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
ClientConnectionId:fcec8527-87a4-4c27-973d-234951cc1a1e
Error Number:207,State:1,Class:16Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid column name 'EquipmentId'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at Microsoft.Data.SqlClient.SqlDataReader.get_MetaData()
   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
ClientConnectionId:fcec8527-87a4-4c27-973d-234951cc1a1e
Error Number:207,State:1,Class:16

2024-12-05T20:45:46.0551579-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated]	An 'IServiceProvider' was created for internal use by Entity Framework.
2024-12-05T20:45:47.4941928-06:00	DBUG	[Microsoft.EntityFrameworkCore.Model]	[Microsoft.EntityFrameworkCore.Model.RedundantIndexRemoved]	The index {'AbilitiesId'} was not created on entity type 'AbilityPlayer (Dictionary<string, object>)' as the properties are already covered by the index {'AbilitiesId', 'PlayersId'}.
2024-12-05T20:45:47.7065718-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized]	Entity Framework Core 9.0.0 initialized 'GameContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.0' with options: EngineType=SqlServer using lazy loading proxies 
2024-12-05T20:45:47.7361988-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Player>()
    .OfType<Player>()
    .FirstOrDefault()'
2024-12-05T20:45:47.7984183-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T20:45:47.8779052-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Player>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.EquipmentId (int?) FK Index, 1], [Property: Player.Experience (int) Required, 2], [Property: Player.Health (int) Required, 3], [Property: Player.Name (string) Required, 4] }
        SELECT TOP(1) p.Id, p.EquipmentId, p.Experience, p.Health, p.Name
        FROM Players AS p) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.EquipmentId (int?) FK Index, 1], [Property: Player.Experience (int) Required, 2], [Property: Player.Health (int) Required, 3], [Property: Player.Name (string) Required, 4] }
        SELECT TOP(1) p.Id, p.EquipmentId, p.Experience, p.Health, p.Name
        FROM Players AS p, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Player entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Player instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Player);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Player.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Player)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]: 
                        {
                            return (Player)
                            {
                                PlayerProxy instance;
                                DbContext namelessParameter{2};
                                IEntityType namelessParameter{3};
                                ILazyLoader namelessParameter{4};
                                namelessParameter{2} = materializationContext1.Context;
                                namelessParameter{3} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{4} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (PlayerProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{2}, 
                                    entityType: namelessParameter{3}, 
                                    loader: namelessParameter{4}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<EquipmentId>k__BackingField = dataReader.IsDBNull(1) ? default(int?) : (int?)dataReader.GetInt32(1);
                                instance.<Experience>k__BackingField = dataReader.GetInt32(2);
                                instance.<Health>k__BackingField = dataReader.GetInt32(3);
                                instance.<Name>k__BackingField = dataReader.GetString(4);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{2} is IInjectableService) ? ((IInjectableService)namelessParameter{2}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Player)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T20:45:47.8932834-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating]	Creating DbConnection.
2024-12-05T20:45:47.9044742-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated]	Created DbConnection. (10ms).
2024-12-05T20:45:47.9057201-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T20:45:48.0574857-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T20:45:48.0594171-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T20:45:48.0615682-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (2ms).
2024-12-05T20:45:48.0621444-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (3ms).
2024-12-05T20:45:48.0643386-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[EquipmentId], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T20:45:48.0829771-06:00	FAIL	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandError]	Failed executing DbCommand (18ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[EquipmentId], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T20:45:48.0836762-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T20:45:48.0866091-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'W11_Assignment' on server 'bitsql.wctc.edu' (1ms).
2024-12-05T20:45:48.0930119-06:00	FAIL	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryIterationFailed]	An exception occurred while iterating over the results of a query for context type 'ConsoleRpgEntities.Data.GameContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid column name 'EquipmentId'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at Microsoft.Data.SqlClient.SqlDataReader.get_MetaData()
   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
ClientConnectionId:85f7cd42-ee0c-4a7d-b3ec-49a16c52e29b
Error Number:207,State:1,Class:16Microsoft.Data.SqlClient.SqlException (0x80131904): Invalid column name 'EquipmentId'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at Microsoft.Data.SqlClient.SqlDataReader.get_MetaData()
   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
ClientConnectionId:85f7cd42-ee0c-4a7d-b3ec-49a16c52e29b
Error Number:207,State:1,Class:16

2024-12-05T20:58:50.8016180-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated]	An 'IServiceProvider' was created for internal use by Entity Framework.
2024-12-05T21:03:29.8037353-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated]	An 'IServiceProvider' was created for internal use by Entity Framework.
2024-12-05T21:03:31.2741993-06:00	DBUG	[Microsoft.EntityFrameworkCore.Model]	[Microsoft.EntityFrameworkCore.Model.RedundantIndexRemoved]	The index {'AbilitiesId'} was not created on entity type 'AbilityPlayer (Dictionary<string, object>)' as the properties are already covered by the index {'AbilitiesId', 'PlayersId'}.
2024-12-05T21:03:31.3654853-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized]	Entity Framework Core 9.0.0 initialized 'GameContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.0' with options: EngineType=SqlServer using lazy loading proxies 
2024-12-05T21:03:31.3873807-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Player>()
    .OfType<Player>()
    .FirstOrDefault()'
2024-12-05T21:03:31.4548086-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T21:03:31.5617584-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Player>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.EquipmentId (int?) FK Index, 1], [Property: Player.Experience (int) Required, 2], [Property: Player.Health (int) Required, 3], [Property: Player.Name (string) Required, 4] }
        SELECT TOP(1) p.Id, p.EquipmentId, p.Experience, p.Health, p.Name
        FROM Players AS p) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Player.EquipmentId (int?) FK Index, 1], [Property: Player.Experience (int) Required, 2], [Property: Player.Health (int) Required, 3], [Property: Player.Name (string) Required, 4] }
        SELECT TOP(1) p.Id, p.EquipmentId, p.Experience, p.Health, p.Name
        FROM Players AS p, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Player entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Player instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Player);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Player.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Player)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]: 
                        {
                            return (Player)
                            {
                                PlayerProxy instance;
                                DbContext namelessParameter{2};
                                IEntityType namelessParameter{3};
                                ILazyLoader namelessParameter{4};
                                namelessParameter{2} = materializationContext1.Context;
                                namelessParameter{3} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{4} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (PlayerProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{2}, 
                                    entityType: namelessParameter{3}, 
                                    loader: namelessParameter{4}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<EquipmentId>k__BackingField = dataReader.IsDBNull(1) ? default(int?) : (int?)dataReader.GetInt32(1);
                                instance.<Experience>k__BackingField = dataReader.GetInt32(2);
                                instance.<Health>k__BackingField = dataReader.GetInt32(3);
                                instance.<Name>k__BackingField = dataReader.GetString(4);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{2} is IInjectableService) ? ((IInjectableService)namelessParameter{2}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Player)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T21:03:31.5754744-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating]	Creating DbConnection.
2024-12-05T21:03:31.5869830-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated]	Created DbConnection. (10ms).
2024-12-05T21:03:31.5879826-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:31.7199024-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:31.7218548-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T21:03:31.7240268-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (2ms).
2024-12-05T21:03:31.7246133-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (3ms).
2024-12-05T21:03:31.7268917-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[EquipmentId], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T21:03:31.7452161-06:00	INFO	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted]	Executed DbCommand (17ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [p].[Id], [p].[EquipmentId], [p].[Experience], [p].[Health], [p].[Name]
FROM [Players] AS [p]
2024-12-05T21:03:31.7630930-06:00	DBUG	[Microsoft.EntityFrameworkCore.ChangeTracking]	[Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking]	Context 'GameContext' started tracking 'Player' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2024-12-05T21:03:31.7743935-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing]	Closing data reader to 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:31.7764670-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing]	A data reader for 'W11_Assignment' on server 'bitsql.wctc.edu' is being disposed after spending 29ms reading results.
2024-12-05T21:03:31.7770610-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:31.7788007-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'W11_Assignment' on server 'bitsql.wctc.edu' (1ms).
2024-12-05T21:03:31.7793180-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Monster>()
    .OfType<Goblin>()
    .FirstOrDefault()'
2024-12-05T21:03:31.7830821-06:00	WARN	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.FirstWithoutOrderByAndFilterWarning]	The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
2024-12-05T21:03:31.7864201-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Goblin>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Monster.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Monster.AggressionLevel (int) Required, 1], [Property: Monster.Health (int) Required, 2], [Property: Monster.MonsterType (string) Required AfterSave:Throw MaxLength(8), 3], [Property: Monster.Name (string) Required, 4], [Property: Goblin.Sneakiness (int) Required, 5] }
        SELECT TOP(1) m.Id, m.AggressionLevel, m.Health, m.MonsterType, m.Name, m.Sneakiness
        FROM Monsters AS m) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Monster.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Monster.AggressionLevel (int) Required, 1], [Property: Monster.Health (int) Required, 2], [Property: Monster.MonsterType (string) Required AfterSave:Throw MaxLength(8), 3], [Property: Monster.Name (string) Required, 4], [Property: Goblin.Sneakiness (int) Required, 5] }
        SELECT TOP(1) m.Id, m.AggressionLevel, m.Health, m.MonsterType, m.Name, m.Sneakiness
        FROM Monsters AS m, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Goblin entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Goblin instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Goblin);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Monster.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Goblin)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = 
                {
                    string discriminator;
                    discriminator = dataReader.GetString(3);
                    return switch (discriminator)
                    {
                        case "Goblin": 
                            [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]
                        default: 
                            {
                                throw StructuralTypeShaperExpression.CreateUnableToDiscriminateException(
                                    type: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")], 
                                    discriminator: (object)discriminator);
                                return null;
                            }
                    }
                };
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]: 
                        {
                            return (Goblin)
                            {
                                GoblinProxy instance;
                                DbContext namelessParameter{3};
                                IEntityType namelessParameter{4};
                                ILazyLoader namelessParameter{5};
                                namelessParameter{3} = materializationContext1.Context;
                                namelessParameter{4} = (IEntityType)ParameterBindingInfo.StructuralType;
                                namelessParameter{5} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                instance = (GoblinProxy)ProxyFactory.CreateLazyLoadingProxy(
                                    context: namelessParameter{3}, 
                                    entityType: namelessParameter{4}, 
                                    loader: namelessParameter{5}, 
                                    constructorArguments: new object[]{ });
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<AggressionLevel>k__BackingField = dataReader.GetInt32(1);
                                instance.<Health>k__BackingField = dataReader.GetInt32(2);
                                instance.<MonsterType>k__BackingField = dataReader.GetString(3);
                                instance.<Name>k__BackingField = dataReader.GetString(4);
                                instance.<Sneakiness>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                (namelessParameter{5} is IInjectableService) ? ((IInjectableService)namelessParameter{5}).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Goblin Base: Monster | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Monsters.Goblin")]) : default(void);
                                return instance;
                            };
                        }
                    default: 
                        default(Goblin)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)
    .SingleOrDefault()'
2024-12-05T21:03:31.7877013-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:31.7879906-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:31.7880187-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T21:03:31.7880400-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (0ms).
2024-12-05T21:03:31.7880490-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (0ms).
2024-12-05T21:03:31.7880674-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [m].[Id], [m].[AggressionLevel], [m].[Health], [m].[MonsterType], [m].[Name], [m].[Sneakiness]
FROM [Monsters] AS [m]
2024-12-05T21:03:31.9714796-06:00	INFO	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted]	Executed DbCommand (183ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [m].[Id], [m].[AggressionLevel], [m].[Health], [m].[MonsterType], [m].[Name], [m].[Sneakiness]
FROM [Monsters] AS [m]
2024-12-05T21:03:31.9734371-06:00	DBUG	[Microsoft.EntityFrameworkCore.ChangeTracking]	[Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking]	Context 'GameContext' started tracking 'Goblin' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2024-12-05T21:03:31.9774721-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing]	Closing data reader to 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:31.9775006-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing]	A data reader for 'W11_Assignment' on server 'bitsql.wctc.edu' is being disposed after spending 5ms reading results.
2024-12-05T21:03:31.9775161-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:31.9775456-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'W11_Assignment' on server 'bitsql.wctc.edu' (0ms).
2024-12-05T21:03:33.5782265-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.NavigationLazyLoading]	The navigation 'PlayerProxy.Equipment' is being lazy-loaded.
2024-12-05T21:03:33.5821430-06:00	DBUG	[Microsoft.EntityFrameworkCore.Infrastructure]	[Microsoft.EntityFrameworkCore.Infrastructure.NavigationLazyLoading]	The navigation 'PlayerProxy.Abilities' is being lazy-loaded.
2024-12-05T21:03:33.5917700-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting]	Compiling query expression: 
'DbSet<Player>()
    .Where(e => EF.Property<int>(e, "Id") == __p_0)
    .SelectMany(e => e.Abilities)
    .NotQuiteInclude(e => EF.Property<IEnumerable<Player>>(e, "Players")
        .Where(e => EF.Property<int>(e, "Id") == __p_0))
    .AsTracking()'
2024-12-05T21:03:33.6021324-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.NavigationBaseIncluded]	Including navigation: 'Ability.Players'.
2024-12-05T21:03:33.6538168-06:00	DBUG	[Microsoft.EntityFrameworkCore.Query]	[Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned]	Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Ability>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Ability.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Ability.AbilityType (string) Required AfterSave:Throw MaxLength(13), 1], [Property: Ability.Description (string) Required, 2], [Property: Ability.Name (string) Required, 3], [Property: ShoveAbility.Damage (int) Required, 4], [Property: ShoveAbility.Distance (int) Required, 5] }
            1 -> 6
            2 -> 7
            3 -> 8
            4 -> 0
            5 -> Dictionary<IProperty, int> { [Property: AbilityPlayer (Dictionary<string, object>).AbilitiesId (no field, int) Indexer Required PK FK AfterSave:Throw, 9], [Property: AbilityPlayer (Dictionary<string, object>).PlayersId (no field, int) Indexer Required PK FK Index AfterSave:Throw, 10] }
            6 -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 11], [Property: Player.EquipmentId (int?) FK Index, 12], [Property: Player.Experience (int) Required, 13], [Property: Player.Health (int) Required, 14], [Property: Player.Name (string) Required, 15] }
            7 -> 9
            8 -> 10
            9 -> 11
        SELECT s.Id, s.AbilityType, s.Description, s.Name, s.Damage, s.Distance, p.Id, s.AbilitiesId, s.PlayersId, s0.AbilitiesId, s0.PlayersId, s0.Id, s0.EquipmentId, s0.Experience, s0.Health, s0.Name
        FROM Players AS p
        INNER JOIN 
        (
            SELECT a.Id, a.AbilityType, a.Description, a.Name, a.Damage, a.Distance, p0.AbilitiesId, p0.PlayersId
            FROM PlayerAbilities AS p0
            INNER JOIN Abilities AS a ON p0.AbilitiesId == a.Id
        ) AS s ON p.Id == s.PlayersId
        LEFT JOIN 
        (
            SELECT p1.AbilitiesId, p1.PlayersId, p2.Id, p2.EquipmentId, p2.Experience, p2.Health, p2.Name
            FROM PlayerAbilities AS p1
            INNER JOIN Players AS p2 ON p1.PlayersId == p2.Id
            WHERE p2.Id == @__p_0
        ) AS s0 ON s.Id == s0.AbilitiesId
        WHERE p.Id == @__p_0
        ORDER BY p.Id ASC, s.AbilitiesId ASC, s.PlayersId ASC, s.Id ASC, s0.AbilitiesId ASC, s0.PlayersId ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Ability.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Ability.AbilityType (string) Required AfterSave:Throw MaxLength(13), 1], [Property: Ability.Description (string) Required, 2], [Property: Ability.Name (string) Required, 3], [Property: ShoveAbility.Damage (int) Required, 4], [Property: ShoveAbility.Distance (int) Required, 5] }
            1 -> 6
            2 -> 7
            3 -> 8
            4 -> 0
            5 -> Dictionary<IProperty, int> { [Property: AbilityPlayer (Dictionary<string, object>).AbilitiesId (no field, int) Indexer Required PK FK AfterSave:Throw, 9], [Property: AbilityPlayer (Dictionary<string, object>).PlayersId (no field, int) Indexer Required PK FK Index AfterSave:Throw, 10] }
            6 -> Dictionary<IProperty, int> { [Property: Player.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 11], [Property: Player.EquipmentId (int?) FK Index, 12], [Property: Player.Experience (int) Required, 13], [Property: Player.Health (int) Required, 14], [Property: Player.Name (string) Required, 15] }
            7 -> 9
            8 -> 10
            9 -> 11
        SELECT s.Id, s.AbilityType, s.Description, s.Name, s.Damage, s.Distance, p.Id, s.AbilitiesId, s.PlayersId, s0.AbilitiesId, s0.PlayersId, s0.Id, s0.EquipmentId, s0.Experience, s0.Health, s0.Name
        FROM Players AS p
        INNER JOIN 
        (
            SELECT a.Id, a.AbilityType, a.Description, a.Name, a.Damage, a.Distance, p0.AbilitiesId, p0.PlayersId
            FROM PlayerAbilities AS p0
            INNER JOIN Abilities AS a ON p0.AbilitiesId == a.Id
        ) AS s ON p.Id == s.PlayersId
        LEFT JOIN 
        (
            SELECT p1.AbilitiesId, p1.PlayersId, p2.Id, p2.EquipmentId, p2.Experience, p2.Health, p2.Name
            FROM PlayerAbilities AS p1
            INNER JOIN Players AS p2 ON p1.PlayersId == p2.Id
            WHERE p2.Id == @__p_0
        ) AS s0 ON s.Id == s0.AbilitiesId
        WHERE p.Id == @__p_0
        ORDER BY p.Id ASC, s.AbilitiesId ASC, s.PlayersId ASC, s.Id ASC, s0.AbilitiesId ASC, s0.PlayersId ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Ability entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Ability instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Ability);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Ability.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.Ability").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Ability)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = 
                    {
                        string discriminator;
                        discriminator = dataReader.GetString(1);
                        return switch (discriminator)
                        {
                            case "ShoveAbility": 
                                [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]
                            default: 
                                {
                                    throw StructuralTypeShaperExpression.CreateUnableToDiscriminateException(
                                        type: [LIFTABLE Constant: EntityType: Ability Abstract | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.Ability")], 
                                        discriminator: (object)discriminator);
                                    return null;
                                }
                        }
                    };
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]: 
                            {
                                return (Ability)
                                {
                                    ShoveAbilityProxy instance;
                                    DbContext namelessParameter{3};
                                    IEntityType namelessParameter{4};
                                    ILazyLoader namelessParameter{5};
                                    namelessParameter{3} = materializationContext1.Context;
                                    namelessParameter{4} = (IEntityType)ParameterBindingInfo.StructuralType;
                                    namelessParameter{5} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext1.Context);
                                    instance = (ShoveAbilityProxy)ProxyFactory.CreateLazyLoadingProxy(
                                        context: namelessParameter{3}, 
                                        entityType: namelessParameter{4}, 
                                        loader: namelessParameter{5}, 
                                        constructorArguments: new object[]{ });
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<AbilityType>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Name>k__BackingField = dataReader.GetString(3);
                                    instance.<Damage>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                    instance.<Distance>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]) : default(void);
                                    (namelessParameter{3} is IInjectableService) ? ((IInjectableService)namelessParameter{3}).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]) : default(void);
                                    (namelessParameter{4} is IInjectableService) ? ((IInjectableService)namelessParameter{4}).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]) : default(void);
                                    (namelessParameter{5} is IInjectableService) ? ((IInjectableService)namelessParameter{5}).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: ShoveAbility Base: Ability | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.ShoveAbility")]) : default(void);
                                    return instance;
                                };
                            }
                        default: 
                            default(Ability)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Ability, Ability>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Ability)(resultContext.Values[0]), 
                parentIdentifier: (queryContext, dataReader) => new object[]
                { 
                    (object)(int?)dataReader.GetInt32(6), 
                    (object)(int?)dataReader.GetInt32(7), 
                    (object)(int?)dataReader.GetInt32(8), 
                    (object)(int?)dataReader.GetInt32(0) 
                }, 
                outerIdentifier: (queryContext, dataReader) => new object[]
                { 
                    (object)(int?)dataReader.GetInt32(6), 
                    (object)(int?)dataReader.GetInt32(7), 
                    (object)(int?)dataReader.GetInt32(8), 
                    (object)(int?)dataReader.GetInt32(0) 
                }, 
                navigation: [LIFTABLE Constant: SkipNavigation: Ability.Players (IEnumerable<Player>) CollectionPlayer Inverse: Abilities PropertyAccessMode.Field | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.Ability").FindSkipNavigation("Players")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Ability, IEnumerable<Player>, Player> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.Ability").FindSkipNavigation("Players").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: False);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Ability, Player>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: (queryContext, dataReader) => new object[]
            { 
                (object)(int?)dataReader.GetInt32(6), 
                (object)(int?)dataReader.GetInt32(7), 
                (object)(int?)dataReader.GetInt32(8), 
                (object)(int?)dataReader.GetInt32(0) 
            }, 
            outerIdentifier: (queryContext, dataReader) => new object[]
            { 
                (object)(int?)dataReader.GetInt32(6), 
                (object)(int?)dataReader.GetInt32(7), 
                (object)(int?)dataReader.GetInt32(8), 
                (object)(int?)dataReader.GetInt32(0) 
            }, 
            selfIdentifier: (queryContext, dataReader) => new object[]
            { 
                (object)dataReader.IsDBNull(9) ? default(int?) : (int?)dataReader.GetInt32(9), 
                (object)dataReader.IsDBNull(10) ? default(int?) : (int?)dataReader.GetInt32(10), 
                (object)dataReader.IsDBNull(11) ? default(int?) : (int?)dataReader.GetInt32(11) 
            }, 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
            { 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) 
            }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
            { 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) 
            }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
            { 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right), 
                (left, right) => left == null ? right == null : right != null && Invoke((v1, v2) => v1 == v2, (int)left, (int)right) 
            }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Dictionary<string, object> entity;
                Player entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Dictionary<string, object> instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Dictionary<string, object>);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: AbilityPlayer (Dictionary<string, object>).AbilitiesId, AbilityPlayer (Dictionary<string, object>).PlayersId PK | Resolver: c => c.Dependencies.Model.FindEntityType("AbilityPlayer").FindPrimaryKey()], 
                        keyValues: new object[]
                        { 
                            dataReader.IsDBNull(9) ? default(object) : (object)dataReader.GetInt32(9), 
                            dataReader.IsDBNull(10) ? default(object) : (object)dataReader.GetInt32(10) 
                        }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Dictionary<string, object>)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("AbilityPlayer")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("AbilityPlayer")]: 
                                {
                                    return (Dictionary<string, object>)
                                    {
                                        Dictionary`2Proxy instance;
                                        DbContext namelessParameter{14};
                                        IEntityType namelessParameter{15};
                                        ILazyLoader namelessParameter{16};
                                        namelessParameter{14} = materializationContext2.Context;
                                        namelessParameter{15} = (IEntityType)ParameterBindingInfo.StructuralType;
                                        namelessParameter{16} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext2.Context);
                                        instance = (Dictionary`2Proxy)ProxyFactory.CreateLazyLoadingProxy(
                                            context: namelessParameter{14}, 
                                            entityType: namelessParameter{15}, 
                                            loader: namelessParameter{16}, 
                                            constructorArguments: new object[]{ });
                                        instance["AbilitiesId"] = dataReader.IsDBNull(9) ? default(object) : (object)dataReader.GetInt32(9);
                                        instance["PlayersId"] = dataReader.IsDBNull(10) ? default(object) : (object)dataReader.GetInt32(10);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("AbilityPlayer")]) : default(void);
                                        (namelessParameter{14} is IInjectableService) ? ((IInjectableService)namelessParameter{14}).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{18} => namelessParameter{18}.Dependencies.Model.FindEntityType("AbilityPlayer")]) : default(void);
                                        (namelessParameter{15} is IInjectableService) ? ((IInjectableService)namelessParameter{15}).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{19} => namelessParameter{19}.Dependencies.Model.FindEntityType("AbilityPlayer")]) : default(void);
                                        (namelessParameter{16} is IInjectableService) ? ((IInjectableService)namelessParameter{16}).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: AbilityPlayer (Dictionary<string, object>) CLR Type: Dictionary<string, object> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("AbilityPlayer")]) : default(void);
                                        return instance;
                                    };
                                }
                            default: 
                                default(Dictionary<string, object>)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                entity = 
                {
                    MaterializationContext materializationContext3;
                    IEntityType entityType3;
                    Player instance3;
                    InternalEntityEntry entry3;
                    bool hasNullKey3;
                    materializationContext3 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance3 = default(Player);
                    entry3 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Player.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(11) ? default(object) : (object)dataReader.GetInt32(11) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey3);
                    !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
                    {
                        entityType3 = entry3.EntityType;
                        return instance3 = (Player)entry3.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot3;
                        shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType3 = [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{21} => namelessParameter{21}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")];
                        instance3 = switch (entityType3)
                        {
                            case [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{22} => namelessParameter{22}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]: 
                                {
                                    return (Player)
                                    {
                                        PlayerProxy instance;
                                        DbContext namelessParameter{23};
                                        IEntityType namelessParameter{24};
                                        ILazyLoader namelessParameter{25};
                                        namelessParameter{23} = materializationContext3.Context;
                                        namelessParameter{24} = (IEntityType)ParameterBindingInfo.StructuralType;
                                        namelessParameter{25} = InfrastructureExtensions.GetService<ILazyLoader>((IInfrastructure<IServiceProvider>)materializationContext3.Context);
                                        instance = (PlayerProxy)ProxyFactory.CreateLazyLoadingProxy(
                                            context: namelessParameter{23}, 
                                            entityType: namelessParameter{24}, 
                                            loader: namelessParameter{25}, 
                                            constructorArguments: new object[]{ });
                                        instance.<Id>k__BackingField = dataReader.IsDBNull(11) ? default(int) : dataReader.GetInt32(11);
                                        instance.<EquipmentId>k__BackingField = dataReader.IsDBNull(12) ? default(int?) : (int?)dataReader.GetInt32(12);
                                        instance.<Experience>k__BackingField = dataReader.IsDBNull(13) ? default(int) : dataReader.GetInt32(13);
                                        instance.<Health>k__BackingField = dataReader.IsDBNull(14) ? default(int) : dataReader.GetInt32(14);
                                        instance.<Name>k__BackingField = dataReader.IsDBNull(15) ? default(string) : dataReader.GetString(15);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext3.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{26} => namelessParameter{26}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                        (namelessParameter{23} is IInjectableService) ? ((IInjectableService)namelessParameter{23}).Injected(
                                            context: materializationContext3.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{27} => namelessParameter{27}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                        (namelessParameter{24} is IInjectableService) ? ((IInjectableService)namelessParameter{24}).Injected(
                                            context: materializationContext3.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{28} => namelessParameter{28}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                        (namelessParameter{25} is IInjectableService) ? ((IInjectableService)namelessParameter{25}).Injected(
                                            context: materializationContext3.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Player | Resolver: namelessParameter{29} => namelessParameter{29}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player")]) : default(void);
                                        return instance;
                                    };
                                }
                            default: 
                                default(Player)
                        }
                        ;
                        entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType3, 
                            entity: instance3, 
                            snapshot: shadowSnapshot3);
                        return instance3;
                    } : default(void);
                    return instance3;
                };
                return NavigationExpandingExpressionVisitor.FetchJoinEntity<Dictionary<string, object>, Player>(
                    joinEntity: entity, 
                    targetEntity: entity);
            }, 
            inverseNavigation: [LIFTABLE Constant: SkipNavigation: Player.Abilities (IEnumerable<Ability>) CollectionAbility Inverse: Players PropertyAccessMode.Field | Resolver: namelessParameter{30} => namelessParameter{30}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindSkipNavigation("Abilities")], 
            fixup: (namelessParameter{31}, namelessParameter{32}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Ability, IEnumerable<Player>, Player> | Resolver: namelessParameter{33} => namelessParameter{33}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Abilities.PlayerAbilities.Ability").FindSkipNavigation("Players").GetCollectionAccessor()].Add(
                    entity: namelessParameter{31}, 
                    value: namelessParameter{32}, 
                    forMaterialization: True);
                return [LIFTABLE Constant: ClrICollectionAccessor<Player, IEnumerable<Ability>, Ability> | Resolver: namelessParameter{34} => namelessParameter{34}.Dependencies.Model.FindEntityType("ConsoleRpgEntities.Models.Characters.Player").FindSkipNavigation("Abilities").GetCollectionAccessor()].Add(
                    entity: namelessParameter{32}, 
                    value: namelessParameter{31}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Ability)(resultContext.Values[0]) : default(Ability);
    }, 
    contextType: ConsoleRpgEntities.Data.GameContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2024-12-05T21:03:33.6590887-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening]	Opening connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:33.6591761-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened]	Opened connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:33.6591924-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreating]	Creating DbCommand for 'ExecuteReader'.
2024-12-05T21:03:33.6592112-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandCreated]	Created DbCommand for 'ExecuteReader' (0ms).
2024-12-05T21:03:33.6599900-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized]	Initialized DbCommand for 'ExecuteReader' (0ms).
2024-12-05T21:03:33.6610363-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting]	Executing DbCommand [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [s].[Id], [s].[AbilityType], [s].[Description], [s].[Name], [s].[Damage], [s].[Distance], [p].[Id], [s].[AbilitiesId], [s].[PlayersId], [s0].[AbilitiesId], [s0].[PlayersId], [s0].[Id], [s0].[EquipmentId], [s0].[Experience], [s0].[Health], [s0].[Name]
FROM [Players] AS [p]
INNER JOIN (
    SELECT [a].[Id], [a].[AbilityType], [a].[Description], [a].[Name], [a].[Damage], [a].[Distance], [p0].[AbilitiesId], [p0].[PlayersId]
    FROM [PlayerAbilities] AS [p0]
    INNER JOIN [Abilities] AS [a] ON [p0].[AbilitiesId] = [a].[Id]
) AS [s] ON [p].[Id] = [s].[PlayersId]
LEFT JOIN (
    SELECT [p1].[AbilitiesId], [p1].[PlayersId], [p2].[Id], [p2].[EquipmentId], [p2].[Experience], [p2].[Health], [p2].[Name]
    FROM [PlayerAbilities] AS [p1]
    INNER JOIN [Players] AS [p2] ON [p1].[PlayersId] = [p2].[Id]
    WHERE [p2].[Id] = @__p_0
) AS [s0] ON [s].[Id] = [s0].[AbilitiesId]
WHERE [p].[Id] = @__p_0
ORDER BY [p].[Id], [s].[AbilitiesId], [s].[PlayersId], [s].[Id], [s0].[AbilitiesId], [s0].[PlayersId]
2024-12-05T21:03:33.6869977-06:00	INFO	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted]	Executed DbCommand (27ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [s].[Id], [s].[AbilityType], [s].[Description], [s].[Name], [s].[Damage], [s].[Distance], [p].[Id], [s].[AbilitiesId], [s].[PlayersId], [s0].[AbilitiesId], [s0].[PlayersId], [s0].[Id], [s0].[EquipmentId], [s0].[Experience], [s0].[Health], [s0].[Name]
FROM [Players] AS [p]
INNER JOIN (
    SELECT [a].[Id], [a].[AbilityType], [a].[Description], [a].[Name], [a].[Damage], [a].[Distance], [p0].[AbilitiesId], [p0].[PlayersId]
    FROM [PlayerAbilities] AS [p0]
    INNER JOIN [Abilities] AS [a] ON [p0].[AbilitiesId] = [a].[Id]
) AS [s] ON [p].[Id] = [s].[PlayersId]
LEFT JOIN (
    SELECT [p1].[AbilitiesId], [p1].[PlayersId], [p2].[Id], [p2].[EquipmentId], [p2].[Experience], [p2].[Health], [p2].[Name]
    FROM [PlayerAbilities] AS [p1]
    INNER JOIN [Players] AS [p2] ON [p1].[PlayersId] = [p2].[Id]
    WHERE [p2].[Id] = @__p_0
) AS [s0] ON [s].[Id] = [s0].[AbilitiesId]
WHERE [p].[Id] = @__p_0
ORDER BY [p].[Id], [s].[AbilitiesId], [s].[PlayersId], [s].[Id], [s0].[AbilitiesId], [s0].[PlayersId]
2024-12-05T21:03:33.6910673-06:00	DBUG	[Microsoft.EntityFrameworkCore.ChangeTracking]	[Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking]	Context 'GameContext' started tracking 'ShoveAbility' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2024-12-05T21:03:33.7034104-06:00	DBUG	[Microsoft.EntityFrameworkCore.ChangeTracking]	[Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking]	Context 'GameContext' started tracking 'AbilityPlayer' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2024-12-05T21:03:33.7043825-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing]	Closing data reader to 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:33.7046417-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Command]	[Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing]	A data reader for 'W11_Assignment' on server 'bitsql.wctc.edu' is being disposed after spending 17ms reading results.
2024-12-05T21:03:33.7046736-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing]	Closing connection to database 'W11_Assignment' on server 'bitsql.wctc.edu'.
2024-12-05T21:03:33.7047043-06:00	DBUG	[Microsoft.EntityFrameworkCore.Database.Connection]	[Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed]	Closed connection to database 'W11_Assignment' on server 'bitsql.wctc.edu' (0ms).
